Parallel proceeing:

    8 core cpu 
    1 cpu -> async methods 
        fs.readFile("/file.md", (err, data) => {
            if (err) throw err;
            });
        Functional Programing 
    2 cpu ->  (err, data) => {
            if (err) throw err;
            return -> flow, data 
            }


Browser: 
    1. window alert()
    2. document getelementbyid() 

node: 
    global 
    process 

Async Progrmaing -> return of data 

    1. using callback methods 
    2. async await keywords -> markers 
        tend to use promises 

        main thread                             sub thread 
            1.                                  1.
            2. promise()=>{}                    2. -> success, failure 
                .then()
                .catch()
            3.

Modules: 
    1. Common JS 
    2. ES 6 -> porject management 

        1. local
        2. built in 
            1. os, fs, http, events
        3. third party 

String value construction 
    1. concatinate string +
    2. template
     const name = 'vijay'
     const str = `My Name is ${ name }` 


Task 1: Read content of a file and where ever we find the string value 'it' replace it with XX.


EMS : 
Departments
    
R getallemployees  get      http://ip:port/api/v1/ems/employees                     200 ok
                 request    headers Accept: application/json/xml 
                 responding headers Content-type: application/json
  pagination       get      http://ip:port/api/v1/ems/employees?page=2&limit=10
  search           get      http://ip:port/api/v1/ems/employees?search=name:vijay   204
  getempbyid       get      http://ip:port/api/v2/ems/employees/[1]                 404
                                {
                                    name: vijay,
                                    age: 12,
                                    email:v@g.com 
                                    links:[
                                        {
                                            operation:get,
                                            type: self,
                                            url: http://ip:port/api/v2/ems/employees/[1]
                                        }, 
                                        {
                                            operation:delete,
                                            type: self,
                                            url: http://ip:port/api/v1/ems/employees/[1]
                                        },
                                        {
                                            operation:update,
                                            type: self,
                                            url: http://ip:port/api/v1/ems/employees/[1]
                                        }

                                    ]
                                }
  getempdept       get      http://ip:port/api/v1/ems/employees/[1]/department
C                  post     http://ip:port/api/v1/ems/employees + data json body    201 created
U                  put      http://ip:port/api/v1/ems/employees/[1]  + data json body 203 Accepted
D                  delete   http://ip:port/api/v1/ems/employees/[1]                   203 Accepted



Task 2: 
EMS : 

Implement a server application to accept the data and display in the console:
    
R getallemployees  get      http://ip:port/api/v1/ems/employees                         200 ok
                 request    headers Accept: application/json/xml 
                 responding headers Content-type: application/json
  pagination       get      http://ip:port/api/v1/ems/employees?page=2&limit=10
  search           get      http://ip:port/api/v1/ems/employees?search=name:vijay       204
  getempbyid       get      http://ip:port/api/v2/ems/employees/[1]                     404
  getempdept       get      http://ip:port/api/v1/ems/employees/[1]/department
C                  post     http://ip:port/api/v1/ems/employees + data json body        201 created
U                  put      http://ip:port/api/v1/ems/employees/[1]  + data json body   202 Accepted
D                  delete   http://ip:port/api/v1/ems/employees/[1]                     202 Accepted

R getalldepartments  get      http://ip:port/api/v1/ems/departments                         200 ok
                 request    headers Accept: application/json/xml 
                 responding headers Content-type: application/json
  pagination       get      http://ip:port/api/v1/ems/departments?page=2&limit=10
  search           get      http://ip:port/api/v1/ems/departments?search=name:vijay       204
  getdeptbyid      get      http://ip:port/api/v2/ems/departments/[1]                     404
  getdeptdept      get      http://ip:port/api/v1/ems/departments/[1]/department
C                  post     http://ip:port/api/v1/ems/departments + data json body        201 created
U                  put      http://ip:port/api/v1/ems/departments/[1]  + data json body   202 Accepted
D                  delete   http://ip:port/api/v1/ems/departments/[1]                     202 Accepted

